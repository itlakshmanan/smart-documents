openapi: 3.0.3
info:
  title: Order Management Service API
  description: REST API for managing customer carts and orders
  version: 1.0.0
  contact:
    name: Smart Document Team
servers:
  - url: http://localhost:8082
    description: Development server
  - url: http://localhost:8082/api/v1
    description: API base path

# Global security requirement - applies to all endpoints
security:
  - basicAuth: []

paths:
  /carts/{customerId}:
    get:
      summary: Get customer cart
      description: Retrieves the current cart for a specific customer. If no cart exists, a new empty cart is created.
      operationId: getCart
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the customer
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              examples:
                cartWithItems:
                  summary: Cart with items
                  value:
                    customerId: "customer123"
                    totalAmount: 59.97
                    items:
                      - bookId: 1
                        quantity: 2
                        price: 19.99
                        subtotal: 39.98
                      - bookId: 2
                        quantity: 1
                        price: 19.99
                        subtotal: 19.99
                emptyCart:
                  summary: Empty cart
                  value:
                    customerId: "customer123"
                    totalAmount: 0.00
                    items: []
        '400':
          description: Invalid customer ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Clear cart
      description: Removes all items from the customer's cart
      operationId: clearCart
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the customer
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              examples:
                emptyCart:
                  summary: Empty cart after clearing
                  value:
                    customerId: "customer123"
                    totalAmount: 0.00
                    items: []
        '400':
          description: Invalid customer ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /carts/{customerId}/items:
    post:
      summary: Add item to cart
      description: Adds a new item to the customer's cart or updates the quantity if the item already exists. Validates inventory availability and retrieves current book pricing.
      operationId: addItemToCart
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
            examples:
              validItem:
                summary: Valid cart item
                value:
                  bookId: 1
                  quantity: 2
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              examples:
                cartWithItem:
                  summary: Cart with added item
                  value:
                    customerId: "customer123"
                    totalAmount: 39.98
                    items:
                      - bookId: 1
                        quantity: 2
                        price: 19.99
                        subtotal: 39.98
        '400':
          description: Invalid request data or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingBookId:
                  summary: Missing bookId
                  value:
                    message: "Invalid request data"
                    timestamp: "2024-01-01T12:00:00Z"
                invalidQuantity:
                  summary: Invalid quantity
                  value:
                    message: "Invalid request data"
                    timestamp: "2024-01-01T12:00:00Z"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Insufficient inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /carts/{customerId}/items/{bookId}:
    patch:
      summary: Update item quantity
      description: Updates the quantity of a specific item in the customer's cart
      operationId: updateItemQuantity
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the customer
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Unique identifier for the book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the item
              required:
                - quantity
            examples:
              updateQuantity:
                summary: Update quantity
                value:
                  quantity: 3
      responses:
        '200':
          description: Item quantity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid quantity value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cart or item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Insufficient inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove item from cart
      description: Removes a specific item from the customer's cart
      operationId: removeItemFromCart
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the customer
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Unique identifier for the book
      responses:
        '200':
          description: Item removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Cart or item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /carts/{customerId}/checkout:
    post:
      summary: Checkout cart
      description: Converts the customer's cart into an order, validates inventory, and reserves items
      operationId: checkoutCart
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the customer
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                createdOrder:
                  summary: Created order
                  value:
                    orderId: "order123"
                    customerId: "customer123"
                    status: "PENDING"
                    totalAmount: 59.97
                    items:
                      - bookId: 1
                        quantity: 2
                        price: 19.99
                        subtotal: 39.98
                      - bookId: 2
                        quantity: 1
                        price: 19.99
                        subtotal: 19.99
                    createdAt: "2024-01-01T12:00:00Z"
        '400':
          description: Cart is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Insufficient inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      summary: Get order details
      description: Retrieves detailed information about a specific order
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the order
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update order status
      description: Updates the status of an existing order
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
                  description: New status for the order
              required:
                - status
            examples:
              cancelOrder:
                summary: Cancel order
                value:
                  status: "CANCELLED"
              confirmOrder:
                summary: Confirm order
                value:
                  status: "CONFIRMED"
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CartItemRequest:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          description: Unique identifier for the book
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the book to add
      required:
        - bookId
        - quantity

    CartItemResponse:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          description: Unique identifier for the book
        quantity:
          type: integer
          description: Quantity of the book
        price:
          type: number
          format: decimal
          description: Current price of the book
        subtotal:
          type: number
          format: decimal
          description: Subtotal for this item (price * quantity)
      required:
        - bookId
        - quantity
        - price
        - subtotal

    CartResponse:
      type: object
      properties:
        customerId:
          type: string
          description: Unique identifier for the customer
        totalAmount:
          type: number
          format: decimal
          description: Total amount of all items in the cart
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemResponse'
          description: List of items in the cart
      required:
        - customerId
        - totalAmount
        - items

    OrderItemResponse:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          description: Unique identifier for the book
        quantity:
          type: integer
          description: Quantity of the book
        price:
          type: number
          format: decimal
          description: Price of the book at the time of order
        subtotal:
          type: number
          format: decimal
          description: Subtotal for this item (price * quantity)
      required:
        - bookId
        - quantity
        - price
        - subtotal

    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          description: Unique identifier for the order
        customerId:
          type: string
          description: Unique identifier for the customer
        status:
          type: string
          enum: [PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
          description: Current status of the order
        totalAmount:
          type: number
          format: decimal
          description: Total amount of the order
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
          description: List of items in the order
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the order was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the order was last updated
      required:
        - orderId
        - customerId
        - status
        - totalAmount
        - items
        - createdAt

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
      required:
        - message
        - timestamp

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication for API access. Default credentials: username=orderadmin, password=orderpass123
